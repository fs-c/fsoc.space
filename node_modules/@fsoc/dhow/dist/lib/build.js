"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debug = void 0;
const path_1 = __importDefault(require("path"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const postcss_1 = __importDefault(require("postcss"));
const process_1 = __importDefault(require("process"));
const fse = __importStar(require("fs-extra"));
const createDebugLogger = __importStar(require("debug"));
const pages_1 = require("./pages");
exports.debug = createDebugLogger.default('dhow:build');
const publicPath = path_1.default.join(process_1.default.cwd(), 'public');
const copyPublic = async (toPath, options) => {
    if (options.initial) {
        return await fse.copy(publicPath, toPath);
    }
    // Assume that content was already copied over so only do what's necessary
    for (const change of options.changes) {
        if (!change.path.startsWith(publicPath)) {
            continue;
        }
        const destination = path_1.default.join(toPath, change.path.slice(publicPath.length));
        if (change.type === 'unlink') {
            exports.debug('deleting %o as part of change %o', destination, change);
            await fse.remove(destination);
        }
        if (change.type === 'change' || change.type === 'add') {
            exports.debug('copying %o to %o as part of change of type %o', change.path, destination, change.type);
            await fse.copy(change.path, destination);
        }
    }
};
const processCSS = async (directory, options) => {
    let plugins = [];
    try {
        plugins = require(path_1.default.resolve('postcss.config.js')).plugins;
    }
    catch (err) {
        if (err.code !== 'MODULE_NOT_FOUND') {
            throw err;
        }
    }
    const processor = postcss_1.default(plugins);
    const cssFiles = (await fast_glob_1.default(path_1.default.join(directory, '**/*.css')));
    for (const cssFile of cssFiles) {
        const filePath = path_1.default.resolve(cssFile);
        const relevantChanges = options.changes.filter((c) => (c.path.slice(publicPath.length) === filePath.slice(directory.length)
            && c.type !== 'unlink'));
        if (!options.initial) {
            exports.debug('relevant changes for %o are %o', cssFile, relevantChanges);
        }
        // Skip this file if this is not the initial build and there were no
        // relevant changes
        if (!options.initial && !relevantChanges.length) {
            exports.debug('skipping %o', cssFile);
            continue;
        }
        const processed = await processor.process(await fse.readFile(filePath), {
            // For source-maps, in case we ever start generating them
            from: filePath
        });
        await fse.writeFile(filePath, processed.css);
    }
};
const build = async (from, to, options = {
    initial: true, changes: []
}) => {
    const fromPath = path_1.default.resolve(from);
    const toPath = path_1.default.resolve(to);
    if (fromPath === toPath) {
        throw new Error('The input and output directories must not be the same.');
    }
    if (options.initial) {
        // Ensure `toPath` points to an empty directory
        await fse.remove(toPath);
        await fse.ensureDir(toPath);
        exports.debug('performing initial build, cleaned %o', toPath);
    }
    else {
        exports.debug('performing incremental build based on %o', options.changes);
    }
    // Build pages from `from` to `to`
    await pages_1.buildPages(fromPath, toPath, options);
    exports.debug('built pages');
    await copyPublic(toPath, options);
    exports.debug('copied public directory');
    // Process CSS inside `to`
    await processCSS(toPath, options);
    exports.debug('processed css');
};
exports.default = build;
