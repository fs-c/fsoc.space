"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VNode = exports.createElement = exports.Fragment = void 0;
exports.Fragment = Symbol('fragment');
const createElement = (type, props = {}, ...children) => {
    if (typeof type === 'function') {
        return type({ children, ...props });
    }
    return new VNode(type, props, children);
};
exports.createElement = createElement;
class VNode {
    constructor(type, attributes, 
    // The VNode[] case happens with the special children prop
    children) {
        this.type = type;
        this.children = [];
        this.attributes = attributes || {};
        for (const child of children) {
            if (Array.isArray(child)) {
                this.children.push(exports.createElement(exports.Fragment, undefined, ...child));
            }
            else {
                this.children.push(child);
            }
        }
    }
    static styleToString(style) {
        // TODO: This is probably slower than alternatives
        const cssifyKey = (key) => key.replace(/[A-Z]/g, (m) => '-' + m.toLowerCase());
        return Object.entries(style).map(([key, value]) => (`${cssifyKey(key)}: ${value.toString()};`)).join(' ');
    }
    toString() {
        let contentString = this.children.map((c) => (Array.isArray(c) ? c.map((c) => c.toString()).join('') : c === null || c === void 0 ? void 0 : c.toString())).join('');
        if (this.type === exports.Fragment) {
            return contentString;
        }
        if (this.attributes.className) {
            this.attributes.class = (this.attributes.class || '')
                + this.attributes.className;
            delete this.attributes.className;
        }
        if (typeof this.attributes.style === 'object') {
            this.attributes.style = VNode.styleToString(this.attributes.style);
        }
        if (this.attributes.html) {
            contentString = this.attributes.html;
            delete this.attributes.html;
        }
        const attributesString = Object.entries(this.attributes)
            .map(([key, value]) => ` ${key}="${value}"`).join(' ');
        return `<${this.type}${attributesString}>${contentString}</${this.type}>`;
    }
    find({ id = '', type }) {
        if (this.attributes.id === id) {
            return this;
        }
        if (this.type === type) {
            return this;
        }
        for (const child of this.children) {
            if (typeof child === 'string' || Array.isArray(child)) {
                continue;
            }
            const found = child.find({ id, type });
            if (found) {
                return found;
            }
        }
        return null;
    }
}
exports.VNode = VNode;
