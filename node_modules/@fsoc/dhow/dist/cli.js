#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const sade_1 = __importDefault(require("sade"));
const build_1 = __importDefault(require("./lib/build"));
const utils_1 = require("./utils");
const buildProduction = async ({ indir: input, outdir: output, }) => {
    process.env.NODE_ENV = 'production';
    utils_1.logger.wait('building...');
    try {
        await build_1.default(input, output);
        utils_1.logger.done('built files to %o', output);
    }
    catch (err) {
        utils_1.logger.error('failed building', err);
    }
};
const buildDevelopment = async ({ indir: input, outdir: output, port, 'disable-cache': disableCache }) => {
    process.env.NODE_ENV = 'development';
    try {
        const actualPort = Number(process.env.PORT || port);
        await utils_1.serve(output, actualPort);
        utils_1.logger.ready('dev server listening on http://localhost:%o', actualPort);
    }
    catch (err) {
        utils_1.logger.error('failed starting dev server', err);
        return;
    }
    utils_1.watch('.', async (changeType, changePath) => {
        const allowedTypes = ['ready', 'add', 'change', 'unlink'];
        if (!allowedTypes.includes(changeType)) {
            return;
        }
        utils_1.logger.wait('building');
        try {
            // Pretend that it's the first build if caching is disabled
            const initial = changeType === 'ready' || disableCache;
            await build_1.default(input, output, {
                initial,
                changes: initial ? [] : [{
                        type: changeType, path: path_1.default.resolve(changePath)
                    }],
            });
            utils_1.logger.done('built changes');
        }
        catch (err) {
            utils_1.logger.error(`failed building`, err);
        }
    }, { ignore: ['node_modules', path_1.default.normalize(output)] });
};
const dhow = sade_1.default('dhow');
dhow.version(require('../package.json').version)
    .option('-i, --indir', 'Sets the directory where files will be read from', 'pages');
dhow.command('build')
    .describe('Compiles your pages for deployment')
    .action(buildProduction)
    .option('-o, --outdir', 'Sets the directory where files will be built to', 'out')
    .example('build -i src/pages -o build');
dhow.command('dev')
    .describe('Rebuilds your pages on change and hosts them locally')
    .action(buildDevelopment)
    .option('-o, --outdir', 'Sets the directory where files will be built to', '.dhow')
    .option('-p, --port', 'Sets the port where your files will be served on, this may be overridden '
    + 'with the environment variable PORT', '3000')
    .option('--disable-cache', 'Disables caching of built files.')
    .example('dev -p 3001')
    .example('dev -i src/pages -o build');
dhow.parse(process.argv);
